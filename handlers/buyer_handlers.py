from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hbold, hunderline, hitalic
from loader import dp, bot, data_manager
from keyboards import commands_default_keyboard
from keyboards import see_commands_default_keyboard
from keyboards import items_commands_kyeboard
from keyboards import start_inline_keyboard, get_items_inline_keyboards, main_inline_keyboard, \
    categories_inline_keyboard, my_cart_inline_keyboards
from keyboards import start_callback, navigation_callback, main_callback, items_callback, blanket_callback, \
    shroud_callback, plaid_callback, accessories_callback, categories_callback, store_callback, search_callback, \
    remove_callback
from aiogram.types import ReplyKeyboardRemove
from states import BuyerState
import json


@dp.message_handler(text=['–ø—Ä–∏–≤–µ—Ç', '–ü—Ä–∏–≤–µ—Ç', '–ù–∞—á–∞—Ç—å'])  # Message_handler - –æ–±—Ä–∞–±–∞—Ç—ã–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(commands=['start'])
async def answer_start_command(message: types.Message):
    await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.first_name)}! üëã\n'
                              f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞–≥–∞–∑–∏–Ω —ç—Å—Ç–µ—Ç–∏—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∏–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è –º–∞–ª—ã—à–µ–π üë∂üèº\n'
                              f'–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –¥—ã—à–∞—â–∏—Ö –≥–∏–ø–ø–æ–∞–ª–ª–µ—Ä–≥–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n',
                         reply_markup=start_inline_keyboard)
    await message.answer(
        text='–ß—Ç–æ–±—ã, –ø–µ—Ä–µ–π—Ç–∏ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–∏–∞—Ç—É—Ä–æ–π',
        reply_markup=commands_default_keyboard)
    await bot.delete_message(chat_id=message.chat.id,
                             message_id=message.message_id)


@dp.message_handler(commands=['main_menu', 'menu'])
@dp.message_handler(text='üóÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def answer_main_menu(message: types.Message):
    await message.answer(text='üóÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                         reply_markup=main_inline_keyboard)


@dp.callback_query_handler(main_callback.filter())
async def call_main_menu(call: types.CallbackQuery):
    await call.message.answer(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                              reply_markup=main_inline_keyboard)
    await bot.delete_message(chat_id=call.message.chat.id,
                             message_id=call.message.message_id)


@dp.callback_query_handler(categories_callback.filter())
async def answer_categories_command(call: types.CallbackQuery):
    await call.message.answer(text='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤',
                              reply_markup=categories_inline_keyboard)
    await bot.delete_message(chat_id=call.message.chat.id,
                             message_id=call.message.message_id)


@dp.message_handler(text=['–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'])
@dp.message_handler(commands=['help', 'menu'])
async def answer_help_command(message: types.Message):
    await message.answer(text='–í –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ —Ç–æ, —á—Ç–æ —è —Å–µ–π—á–∞—Å —É–º–µ—é :)',
                         reply_markup=commands_default_keyboard)


@dp.callback_query_handler(blanket_callback.filter())
async def answer_blanket_callback(call: types.CallbackQuery):
    status, item_info = data_manager.get_item(0, 'blankets', 'database/data/items.json')
    item_text = f'{item_info["id"]}' \
                f'\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {item_info["name"]}' \
                f'\n–°—Ç–∞—Ç—É—Å: {item_info["status"]}' \
                f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: {item_info["amount"]}'
    await call.message.answer(text=item_text,
                              reply_markup=get_items_inline_keyboards())
    await bot.delete_message(chat_id=call.message.chat.id,
                             message_id=call.message.message_id)


@dp.callback_query_handler(search_callback.filter())
async def get_item_name(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await BuyerState.wait_item_name.set()


@dp.message_handler(state=BuyerState.wait_item_name)
async def get_item_name(message: types.Message, state: FSMContext):
    item_info = data_manager.search_items_by_name(message.text)
    if item_info == 0:
        await state.reset_state()
        await message.answer(text='–¢–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º —É –Ω–∞—Å –Ω–µ—Ç :(')
    else:
        await state.reset_state()
        await message.answer(text=f'{item_info["id"]}' \
                                  f'\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {item_info["name"]}' \
                                  f'\n–°—Ç–∞—Ç—É—Å: {item_info["status"]}' \
                                  f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: {item_info["amount"]}')


@dp.message_handler(text='üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')
async def get_item_name(message: types.Message):
    await message.answer(text=f'{hbold("–í–æ–ø—Ä–æ—Å 1 –∏–∑ 3")}'
                         '\n–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º?')
    await BuyerState.first_question.set()


@dp.message_handler(state=BuyerState.first_question)
async def get_item_name(message: types.Message, state: FSMContext):
    answer_1 = message.text
    print(answer_1)
    await message.answer(text=f'{hbold("–í–æ–ø—Ä–æ—Å 2 –∏–∑ 3")}'
                              '\n–ù–∞—Å–∫–æ–ª—å–∫–æ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—à–µ–≥–æ —Ç-–±–æ—Ç–∞?')
    await state.update_data(answers=[answer_1])
    await BuyerState.second_question.set()


@dp.message_handler(state=BuyerState.second_question)
async def get_item_name(message: types.Message, state: FSMContext):
    answers = await state.get_data()
    answers['answers'].append(message.text)
    my_list = answers['answers']
    print(my_list)
    await message.answer(text=f'{hbold("–í–æ–ø—Ä–æ—Å 3 –∏–∑ 3")}'
                              '\n–ß—Ç–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —É–ª—É—á—à–∏—Ç—å?')
    await state.update_data(answers=my_list)
    await BuyerState.third_question.set()


@dp.message_handler(state=BuyerState.third_question)
async def get_item_name(message: types.Message, state: FSMContext):
    answers = await state.get_data()
    answers['answers'].append(message.text)
    my_list = answers['answers']
    print(my_list)
    user_id = message.from_user.id
    data_manager.save_anketa(user_id, my_list)
    await state.reset_state()
    await message.answer(text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤!'
                              f'\n–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞!')


@dp.message_handler(text='üõç –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞')
async def see_my_cart(message: types.Message):
    user_id = message.from_user.id
    with open('database/data/cart.json', 'r') as file:
        items = json.load(file)
    status = 'Left_side'
    if str(user_id) in items[0]:
        if type(items[0][str(user_id)]) == list and len(items[0][str(user_id)]) > 1:
            status, item_info = data_manager.get_item(0, str(user_id), 'database/data/cart.json')
            item_text = f'{item_info["id"]}' \
                        f'\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {item_info["name"]}' \
                        f'\n–°—Ç–∞—Ç—É—Å: {item_info["status"]}' \
                        f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {item_info["amount"]}'
        else:
            if type(items[0][str(user_id)]) == list and len(items[0][str(user_id)]) == 1:
                status = 0
                item_text = f'{items[0][str(user_id)][0]["id"]}' \
                            f'\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {items[0][str(user_id)][0]["name"]}' \
                            f'\n–°—Ç–∞—Ç—É—Å: {items[0][str(user_id)][0]["status"]}' \
                            f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {items[0][str(user_id)][0]["amount"]}'
            else:
                status = -1
                item_text = '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'
    else:
        item_text = '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'
    await message.answer(text=item_text,
                         reply_markup=my_cart_inline_keyboards(status))
    await bot.delete_message(chat_id=message.chat.id,
                             message_id=message.message_id)


@dp.callback_query_handler(remove_callback.filter())
async def remove_position(call: types.CallbackQuery):
    item_id = call.message.text.split('\n')[0]
    print(call)
    user_id = call.from_user.id
    data_manager.remove_pos(user_id, item_id)
    with open('database/data/cart.json', 'r') as file:
        items = json.load(file)
    status = 'Left_side'
    if str(user_id) in items[0]:
        if type(items[0][str(user_id)]) == list and len(items[0][str(user_id)]) > 1:
            status, item_info = data_manager.get_item(0, str(user_id), 'database/data/cart.json')
            item_text = f'{item_info["id"]}' \
                        f'\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {item_info["name"]}' \
                        f'\n–°—Ç–∞—Ç—É—Å: {item_info["status"]}' \
                        f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {item_info["amount"]}'
        else:
            status = 0
            if type(items[0][str(user_id)]) == list:
                item_text = f'{items[0][str(user_id)][0]["id"]}' \
                            f'\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {items[0][str(user_id)][0]["name"]}' \
                            f'\n–°—Ç–∞—Ç—É—Å: {items[0][str(user_id)][0]["status"]}' \
                            f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {items[0][str(user_id)][0]["amount"]}'
            else:
                item_text = f'{items[0][str(user_id)]["id"]}' \
                            f'\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {items[0][str(user_id)]["name"]}' \
                            f'\n–°—Ç–∞—Ç—É—Å: {items[0][str(user_id)]["status"]}' \
                            f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {items[0][str(user_id)]["amount"]}'
    else:
        item_text = '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'
    await call.message.answer(text='–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞')
    await call.message.answer(text=item_text,
                              reply_markup=my_cart_inline_keyboards(status))
    # await bot.delete_message(chat_id=call.message.chat.id,
    #                          message_id=call.message.message_id)


@dp.callback_query_handler(navigation_callback.filter(for_data='my_cart'))
async def see_new_item(call: types.CallbackQuery):
    id = call.data.split(':')[-1]
    user_id = call.from_user.id
    status, item_info = data_manager.get_item(int(id), str(user_id), 'database/data/cart.json')
    item_text = f'{item_info["id"]}' \
                f'\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {item_info["name"]}' \
                f'\n–°—Ç–∞—Ç—É—Å: {item_info["status"]}' \
                f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: {item_info["amount"]}'
    await bot.edit_message_text(text=item_text,
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id)
    await bot.edit_message_reply_markup(reply_markup=my_cart_inline_keyboards(status, id),
                                        chat_id=call.message.chat.id,
                                        message_id=call.message.message_id)


@dp.callback_query_handler(navigation_callback.filter(for_data='items'))
async def see_new_item(call: types.CallbackQuery):
    id = call.data.split(':')[-1]
    status, item_info = data_manager.get_item(int(id), 'blankets', 'database/data/items.json')
    item_text = f'{item_info["id"]}' \
                f'\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {item_info["name"]}' \
                f'\n–°—Ç–∞—Ç—É—Å: {item_info["status"]}' \
                f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: {item_info["amount"]}'
    await bot.edit_message_text(text=item_text,
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id)
    await bot.edit_message_reply_markup(reply_markup=get_items_inline_keyboards(id, status),
                                        chat_id=call.message.chat.id,
                                        message_id=call.message.message_id)


@dp.callback_query_handler(store_callback.filter(category="blankets"))
async def store_item(call: types.CallbackQuery):
    print(call)
    user_id = call.from_user.id
    item_id = call.message.text.split('\n')[0]
    answer = data_manager.put_in_cart(item_id, "blankets", user_id)
    await call.message.answer(text=f'{answer}')


@dp.message_handler(commands=['add'])
async def answer_items_command(message: types.Message):
    await message.answer(text=f'''
    –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...
    ''')


@dp.message_handler(text=['–°–∫—Ä—ã—Ç—å –º–µ–Ω—é'])
async def answer_items_command(message: types.Message):
    await message.answer(text='–Ø —Å–∫—Ä—ã–ª –º–µ–Ω—é',
                         reply_markup=see_commands_default_keyboard)


@dp.message_handler(content_types=['location'])
async def answer_items_command(message: types.Message):
    if message.from_user.id == message.contact.user_id:
        await message.answer(text=f'–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –º–Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ —Ç–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ :)',
                             reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer(text=f'–ê —ç—Ç–æ —á–µ–π —Ç–µ–ª–µ—Ñ–æ–Ω?',
                             reply_markup=ReplyKeyboardRemove())


@dp.message_handler()
async def answer_items_command(message: types.Message):
    await message.answer(text=f'–Ø –ø–æ–∫–∞ —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –∑–Ω–∞—é :(')
